@page
@model IndexModel
@{
    ViewData["Title"] = "Guide";
}

<article>
    <div class="text-center">
        <h1 class="display-4">Guide</h1>
        <p>This guide uses NPM for managing a package and webpack to build/pipe the SDK into the wwwroot. Which makes it
            available for our web application.</p>
    </div>

    <section>
        <h2>Install</h2>
        <p>We will use NPM package manager to manage dependency.</p>
        <ol>
            <li>
                <p>
                    Initilize package.json
                </p>
                <p>
                    <code>npm init -y</code>
                </p>
                <p>This command creates a <code>package.json</code> file in your project root.</p>
            </li>
            <li>
                <p>Install webpack</p>
                <p>
                    <code>npm i -D webpack webpack-cli</code>
                </p>
                <p>This command creates and installs <code>webpack</code> and <code>webpack-cli</code> to your project.
                </p>
            </li>
            <li>
                <p>Install GCP Mini-app JS SDK</p>
                <p>
                    <code>npm i gcp-miniappkit-jssdk</code>
                </p>
                <p>Now, Your <code>package.json</code> should contain these dependencies</p>
                <pre>
                    <code>
"devDependencies": {
    "webpack": "^5.71.0",
    "webpack-cli": "^4.9.2"
},
"dependencies": {
    "gcp-miniappkit-jssdk": "^0.4.0"
}
                    </code>
                </pre>
                <p><i>Note that the version number might not be the same.</i></p>
                <p>The preparation for using a webpack to build GCP Mini-app JS SDK is completed.</p>
            </li>
        </ol>
    </section>

    <section>
        <h2>Include</h2>
        <p>Use webpack to transpile our application JavaScript.</p>
        <ol>
            <li>
                <p>Create <code>webpack.config.js</code> in the root of the project.</p>
            </li>
            <li>
                <p>Put basic configuration for our application.</p>
                <pre>
                    <code>
const path = require("path")

module.exports = {
  entry: "./app/index.js",
  output: {
    path: path.resolve(__dirname, "wwwroot", "js"),
    filename: "app.js",
    publicPath: "/",
  },
  resolve: {
    extensions: [".js"],
  },
  module: {
    rules: [],
  },
  plugins: [],
}
                    </code>
                </pre>
                <p>This configuration transpiles <code>./app/index.js</code> into <code>./wwwroot/js/app.js</code></p>
            </li>
            <li>
                <p>
                    Create <code>./app/index.js</code> to be the entrypoint of our application.
                </p>
            </li>
            <li>
                <p>
                    Import SDK using import syntax <code>import SDK from 'gcp-miniappkit-jssdk'</code>
                </p>
                <pre>
                    <code>
import SDK from 'gcp-miniappkit-jssdk'

console.log(SDK)
                    </code>
                </pre>
            </li>
        </ol>
    </section>

    <section>
        <h2>Example</h2>
        <p>In this section, we will use SDK to get user information (in mock mode).</p>
        <ol>
            <li>
                <p>Init SDK</p>
                <pre>
                    <code>
SDK.init("mock")
                    </code>
                </pre>
            </li>
            <li>
                <p>Get user information and log to the console.</p>
                <pre>
                    <code>
SDK.getUserInfo().then((user) => {
  console.log(user)
})
                    </code>
                </pre>
            </li>
        </ol>
        <p>You can see the whole code in <code>app/index.js</code></p>
    </section>
</article>
